{"version":3,"sources":["Components/P5Logo.tsx","Components/NavBar.tsx","Components/LaptopMockup.tsx","Components/FeatureSection.tsx","Components/Footer.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["P5Logo","id","className","style","width","height","src","NavBar","props","href","navData","brand","link","name","type","data-toggle","data-target","aria-controls","aria-label","links","map","item","index","key","LaotopMockup","alt","FeatureSection","Footer","size","color","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mLAUeA,G,6BARA,kBACX,oCACI,yBAAKC,GAAG,aAAaC,UAAU,mCAAmCC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,UAClG,4BAAQC,IAAI,kEACZ,4BAAQA,IAAI,kBCkCLC,EA3BA,SAACC,GAEZ,OACI,oCACI,yBAAKN,UAAU,wDAAwDD,GAAG,UACtE,yBAAKC,UAAU,mBACX,uBAAGA,UAAU,sBAAsBC,MAAO,CAAEE,OAAQ,QAAUI,KAAMD,EAAME,QAAQC,MAAMC,MACpF,kBAAC,EAAD,MACA,yBAAKV,UAAU,mCAAmCC,MAAO,CAAEE,OAAQ,SAAWG,EAAME,QAAQC,MAAME,OAEtG,4BAAQX,UAAU,0BAA0BY,KAAK,SAASC,cAAY,WAAWC,cAAY,eACzFC,gBAAc,cAAcC,aAAW,sBACvC,0BAAMhB,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BD,GAAG,eACzC,yBAAKC,UAAU,wBACVM,EAAME,QAAQS,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACrB,uBAAGb,KAAMY,EAAKT,KAAMW,IAAKD,EAAOpB,UAAU,oCAAqCmB,EAAKR,eCjBrGW,EAXM,kBACjB,yBAAKvB,GAAG,YAAYC,UAAU,iBAC1B,yBAAKD,GAAG,SAASK,IAAI,qBAAqBmB,IAAI,aAC9C,yBAAKxB,GAAG,gBACJ,wBAAIA,GAAG,cAAcC,UAAU,qBAA/B,mBACA,yBAAKA,UAAU,qBACf,uBAAIO,KAAK,yGAAyGP,UAAU,yCAA5H,+BCgBGwB,EAtBQ,kBACnB,oCACI,yBAAKxB,UAAU,kBACX,yBAAKA,UAAU,aACX,6BAASA,UAAU,SAEf,yBAAKI,IAAI,gCACT,sGAKJ,6BAASJ,UAAU,SACf,yBAAKI,IAAI,gCACT,wF,OC4BLqB,EAtCA,kBACX,yBAAK1B,GAAG,UACJ,0CACA,yCACA,wBAAIC,UAAU,0CACV,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WACTO,KAAK,8BACL,kBAAC,IAAD,CAAUmB,KAAM,GAAIC,MAAM,YAGlC,wBAAI3B,UAAU,YACV,uBAAGA,UAAU,WACTO,KAAK,mDACL,kBAAC,IAAD,CAAYmB,KAAM,GAAIC,MAAM,YAGpC,wBAAI3B,UAAU,YACV,uBAAGA,UAAU,WACTO,KAAK,yBACL,kBAAC,IAAD,CAAamB,KAAM,GAAIC,MAAM,aAIzC,6BACA,6BACA,6BACA,2CACA,8CACA,uBAAG3B,UAAU,WACTO,KAAK,8CACL,kBAAC,IAAD,CAAUmB,KAAM,GAAIC,MAAM,aCGvBC,EA7BH,WAkBV,OACE,yBAAK5B,UAAU,QACb,kBAAC,EAAD,CAAQQ,QAnBI,CACdC,MAAO,CACLE,KAAM,IACND,KAAM,KAERO,MAAO,CAAC,CACNN,KAAM,WACND,KAAM,KACL,CACDC,KAAM,SACND,KAAM,gDACL,CACDC,KAAM,QACND,KAAM,eAON,yBAAKV,UAAU,aACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCvBc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2b77679f.chunk.js","sourcesContent":["import React from 'react';\n\nconst P5Logo = () => (\n    <>\n        <div id=\"logoCanvas\" className=\"d-inline-flex align-items-center\" style={{ width: '80px', height: '80px' }}></div>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.10.2/p5.min.js\"></script>\n        <script src=\"js/logo.js\"></script>\n    </>\n)\n\nexport default P5Logo\n\n\n","import React from 'react';\nimport P5Logo from './P5Logo';\n\ninterface link {\n        name: string;\n        link: string\n}\n\ninterface navData {\n    brand: link;\n    links: Array<link>\n}\n\nconst NavBar = (props: { navData: navData }) => {\n\n    return (\n        <>\n            <nav className=\"navbar bg-none navbar-dark navbar-expand-sm fixed-top\" id=\"header\">\n                <div className=\"container-fluid\">\n                    <a className=\"navbar-brand d-flex\" style={{ height: '80px' }} href={props.navData.brand.link}>\n                        <P5Logo />\n                        <div className=\"d-inline-flex align-items-center\" style={{ height: '80px' }}>{props.navData.brand.name}</div>\n                    </a>\n                    <button className=\"navbar-toggler border-0\" type=\"button\" data-toggle=\"collapse\" data-target=\"#myToggleNav\"\n                        aria-controls=\"myToggleNav\" aria-label=\"Navigation Toggler\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"myToggleNav\">\n                        <div className=\"navbar-nav ml-auto  \">\n                            {props.navData.links.map((item, index) => (\n                                <a href={item.link} key={index} className=\"nav-item nav-link ml-auto active\" >{item.name}</a>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </nav>\n        </>\n    )\n}\n\nexport default NavBar;\n","import React from 'react';\n\nconst LaotopMockup = () => (\n    <div id=\"laptop-bg\" className=\"w-100 mx-auto\">\n        <img id=\"laptop\" src=\"/images/laptop.png\" alt=\"a laptop\" />\n        <div id=\"download-btn\" >\n            <h1 id=\"large-title\" className=\"text-center w-100\">COVID-19 Ticker</h1>\n            <div className=\"text-center w-100\">\n            <a  href=\"https://github.com/EonYang/CoronavirusTicker/releases/download/v1.02-lw/CoronavirusTicker.app.1.02.zip\" className=\"btn btn-large btn-light  align-middle\"> Download for Mac</a>\n        </div>\n        </div>\n    </div>\n)\nexport default LaotopMockup;\n\n\n","import React from 'react';\n\nconst FeatureSection = () => (\n    <>\n        <div className=\"detail-section\">\n            <div className=\"container\">\n                <section className=\"sec-1\">\n\n                    <img src=\"images/discription-1@3x.jpg\" />\n                    <p>\n                        Don’t Google for new reports, it’s right in your status bar.\n                </p>\n                </section>\n\n                <section className=\"sec-2\">\n                    <img src=\"images/discription-2@3x.jpg\" />\n                    <p>\n                        Fully customizable, choose your the region you care.\n                </p>\n                </section>\n            </div>\n        </div>\n    </>\n)\nexport default FeatureSection;","import React from 'react';\nimport { FaGithub, FaLinkedin, FaBriefcase } from 'react-icons/fa';\n\n\n\n\nconst Footer = () => (\n    <div id=\"footer\">\n        <h3>Created by</h3>\n        <h1>Yang Yang</h1>\n        <ul className=\"nav navbar-dark justify-content-center\">\n            <li className=\"nav-item\">\n                <a className=\"nav-link\"\n                    href=\"https://github.com/EonYang\" >\n                    <FaGithub size={32} color=\"white\" />\n                </a>\n            </li>\n            <li className=\"nav-item\">\n                <a className=\"nav-link\"\n                    href=\"https://www.linkedin.com/in/yang-yang-992a9a61/\">\n                    <FaLinkedin size={32} color=\"white\" />\n                </a>\n            </li>\n            <li className=\"nav-item\">\n                <a className=\"nav-link\"\n                    href=\"http://yangyang.blog/\">\n                    <FaBriefcase size={32} color=\"white\" />\n                </a>\n            </li>\n        </ul>\n        <br />\n        <br />\n        <br />\n        <h3>Data source</h3>\n        <h1>CSSEGISandData</h1>\n        <a className=\"nav-link\"\n            href=\"https://github.com/CSSEGISandData/COVID-19\" >\n            <FaGithub size={32} color=\"white\" />\n        </a>\n\n\n\n    </div>\n)\nexport default Footer;","import React from 'react';\nimport 'normalize.css';\nimport './scss/App.scss';\nimport 'jquery/dist/jquery';\nimport 'popper.js/dist/umd/popper';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.bundle';\nimport NavBar from './Components/NavBar';\nimport LaotopMockup from './Components/LaptopMockup';\nimport FeatureSection from './Components/FeatureSection';\nimport Footer from './Components/Footer';\nconst App = () => {\n  const navData = {\n    brand: {\n      name: \" \",\n      link: \"#\"\n    },\n    links: [{\n      name: \"Doanload\",\n      link: \"#\"\n    }, {\n      name: \"Github\",\n      link: \"https://github.com/EonYang/CoronavirusTicker\"\n    }, {\n      name: \"About\",\n      link: \"#footer\"\n    }]\n  }\n\n  return (\n    <div className=\"App \">\n      <NavBar navData={navData} />\n      <div className=\"bg-image\"></div>\n      <LaotopMockup />\n      <FeatureSection />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}